### RigUI Script generated by Bone Layers Addon ###

import bpy

blm_rig_id = "urtb1f72lo6j"


class BLOP_PT_rigui_urtb1f72lo6j(bpy.types.Panel):
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_category = 'Item'
	bl_label = "Rig UI"
	bl_idname = "BLOP_PT_rigui_urtb1f72lo6j"

	@classmethod
	def poll(self, context):
		try:
			return (context.active_object.data.get("blm_rig_id") == blm_rig_id)
		except (AttributeError, KeyError, TypeError):
			return False

	def draw(self, context):
		layout = self.layout
		col = layout.column()


		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=8, toggle=True, text='ROOT')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=11, toggle=True, text='HEAD')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=12, toggle=True, text='NECK')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=9, toggle=True, text='TORSO')
		row.prop(context.active_object.data,'layers', index=10, toggle=True, text='TORSO-TWEAK')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=13, toggle=True, text='LEG.L')
		row.prop(context.active_object.data,'layers', index=14, toggle=True, text='LEG.R')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=16, toggle=True, text='ARM FK.L')
		row.prop(context.active_object.data,'layers', index=17, toggle=True, text='ARM FK.R')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=18, toggle=True, text='ARM IK.L')
		row.prop(context.active_object.data,'layers', index=19, toggle=True, text='ARM IK.R')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=21, toggle=True, text='HANDS')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=26, toggle=True, text='BELT-BAG')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=25, toggle=True, text='SWORD-SHEET')
		row.prop(context.active_object.data,'layers', index=29, toggle=True, text='SWORD')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=27, toggle=True, text='SHOULDER-BAG')

		row = col.row(align=True)
		row.prop(context.active_object.data,'layers', index=24, toggle=True, text='BACKPACK-AXE')
		row.prop(context.active_object.data,'layers', index=28, toggle=True, text='BACKPACK')


class BLOP_PT_customprops_urtb1f72lo6j(bpy.types.Panel):
	bl_category = 'Item'
	bl_label = "Rig Properties"
	bl_idname = "BLOP_PT_customprops_urtb1f72lo6j"
	bl_space_type = 'VIEW_3D'
	bl_region_type = 'UI'
	bl_options = {'DEFAULT_CLOSED'}

	@classmethod
	def poll(self, context):
		if context.active_object.data.get('blm_rig_id'):
			pose_bones = context.selected_pose_bones
			props = None
			rna_properties = {prop.identifier for prop in bpy.types.PoseBone.bl_rna.properties if prop.is_runtime}
			if context.selected_pose_bones:
				bones = context.selected_pose_bones

			elif context.selected_editable_bones:
				bones = [pose_bones[bone.name] for bone in context.selected_editable_bones]

			elif context.mode == 'OBJECT':
				bones = context.active_object.pose.bones

			else:
				return False
			if bones:
				props = [[prop for prop in bone.items() if prop not in rna_properties] for bone in bones]

			if props and bones:
				return (context.active_object.data.get("blm_rig_id") == blm_rig_id)
			else:
				return False

		else:
			return False

	def draw(self, context):
		layout = self.layout
		pose_bones = context.active_object.pose.bones
		if context.selected_pose_bones:
			bones = context.selected_pose_bones

		elif context.selected_editable_bones:
			bones = [pose_bones[bone.name] for bone in context.selected_editable_bones]

		else:
			bones = context.active_object.pose.bones

		def assign_props(row, val, key):
			row.property = key
			row.data_path = "active_pose_bone"
			try:
				row.value = str(val)
			except:
				pass

		rna_properties = {
			prop.identifier for prop in bpy.types.PoseBone.bl_rna.properties
			if prop.is_runtime
		}

	# make scripts backwards compatible
		skip = 0
		skip_keys = rna_properties
		if bpy.app.version < (3, 0, 0):
			skip_keys = rna_properties.union({"_RNA_UI"})
			skip = 1
	# Iterate through selected bones add each prop property of each bone to the panel.

		for bone in context.selected_pose_bones:
			if len(bone.keys()) > skip:
				box = layout.box()
			for key in sorted(bone.keys()):
				if key not in skip_keys:
					val = bone.get(key, "value")
					row = box.row()
					split = row.split(align=True, factor=0.7)
					row = split.row(align=True)
					row.label(text=key, translate=False)
					row = split.row(align=True)
					row.prop(bone, f'["{key}"]', text = "", slider=True)


classes = (BLOP_PT_rigui_urtb1f72lo6j, BLOP_PT_customprops_urtb1f72lo6j, )

register, unregister = bpy.utils.register_classes_factory(classes)

if __name__ == "__main__":
	register()